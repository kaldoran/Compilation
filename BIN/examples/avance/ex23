#!/usr/bin/cpyrr
# -*- coding: utf-8 -*-

% TESTS_STRUCTURES_ET_TABLEAUX %

# Un Point
type Point :
  struct
    x : int;
    y : int;
    size : int;
  end struct;

# Une liste de 50 points
type List : array[0..50] of Point;

# Un ensemble contient le nombre de points courants 
# + la liste correspondante
type ensemble : 
  struct
    size : int;
    content : List;
  end struct;

# Données
var valeurs : ensemble;

# Remplir aléatoirement un type ensemble
proc remplir(ensemble_x : int, ensemble_y : int)
  var i : int;
  var v : List;
  start
  {
    v[0].size = 0;

    for(i = 0; i < 50; i++) do {
      v[i].x = rand() * 101;
      v[i].y = rand() * 101;
      v[0].size += v[i].x * v[i].x + v[i].y * v[i].y;
    }
 
    return;
  };

# Affichage de l'ensemble
proc afficher()
  var i : int;
  var v : List;
  start
  { 
    write("Size: %d\n", v[i].size);

    for(i = 0; i < 50;) do {
      write("(%d, %d)", v[i].x, v[i].y); 

      if (i++) == 49 then { write("\n"); }
      else { write(","); }
    }

    return;
  };

# Recherche une coordonnée
function search_point(x : int, y : int) return bool
  var i,x, y : int;
  var v : List;
  start
  {
    for(i = 0; i < 50;) do {
      if v[i].x == x and v[i].y == y then {
        return true;
      }
    } 
    
    return false;
  };

/* Chainage dynamique : 152 = 0 */
/* Chainage statique : 153 = 0 */

# Je cherche moi-même l'utilité de cette fonction...
function machin_bidule(x : int) return int
  proc truc(y : int)
    var k, y, x : int;
   
    proc mise_k()
      start
      {
        k = 0;
      };

    proc get_k (j :int)
      var ooooo : char;

     /* Taille des variables :
        j = 1; (Paramètre)
        ooooo = 1;

       Taille chainage : 4 (3 statique, 1 dynamique)

       Décalage : BC = 2 + 4 + 164(BC) = 170 */

      start
      {
        mise_k();
        mise_k();
        read(k);
      };

    /* Taille des variables :
       x = 1; (Paramètre)
       k = 1;
       y = 1; 
       x = 1; (Surcharge du paramètre) 

       Taille chainage : 3 (2 statique, 1 dynamique)

       Décalage : BC = 4 + 3 + 157(BC) = 164 */

    start
    {
      write("y = %%\n", y);
      
      if y then {
        write("Je n'y vais pas !\n");
        mise_k(); 
      }
      else {
        write("J'y vais !\n");
        get_k(6); 
      }
    };
  
  var p,x : int;

  /* Taille des variables :
     x = 1; (Paramètre)
     p = 1;
     x = 1; (Surcharge du paramètre) 

     Taille chainage : 2

     Décalage : BC = 3 + 2 + 152(BC) = 157 */

  start
  {
    truc(x * 100);
    x++;
    return x;
  };

var resultat : int;
 
/* Taille des variables :
   valeurs : 50 * 3 + 1 = 151
   resultat : 1
   
   Décalage : BC = 152 */

# Programme
start
{
  write("Appel de machin_bidule\n");
  resultat = machin_bidule(10);
}

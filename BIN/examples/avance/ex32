#!/usr/bin/cpyrr
# -*- coding: utf-8 -*-

% TESTS_DE_CONDITIONS_ET_BOUCLES %

function fun_4(arg1 : int, arg2 : int, arg3 : int, arg4 : string) return int
    start{
        return 4;
    };

function fun(arg1 : int) return int
    start{
        return -1;
    };

function fun_2(arg1 : bool, arg2 : bool) return bool
    start{
        return arg1 and arg2;
    };

function a_2(arg1 : int, arg2 : int) return int
    start{
        return 1;
    };

var b, j, p, a, i, k, r, g, d, bg, t, c, f : int;
var z : bool;
var gg : string;

# Aucune déclaration, on commence directement les instructions
start
{
gg = "4";
gg = "44444";
  # Test bizarre mais qui marche normalement
  if 5 * 4 + b * 3 > 45 or fun_4(p, g, a_2(g + 10 / 8, 15), "bgt") then {
    write("Ok\n");
  }return;
  # do while
  do {
    ++i;
    # Affectations dans condition + or + and
    if j == 3 and p > 3 or b + d == 8 and (a = 4 + (i++)) then {
      write("C'est parfait.\n");
    }
  } while 5 != (++j);

  # for avec parenthèses + Test condition de fonctions
  # Note: for => affectation, expression, affectation
  for(++j; fun_4(5, "oo", a_2(10 + 8 / bg, t + "oo"), "coucou"); i = (++j)) do {
    write("Quel for !\n");
    j += 4 * 8 + 6 * fun_4(4 + 6 / 8, "ooo", 1, 1);
  }

  # Test pseudo-booléen (comme en C)
  # true = Toute valeur différente de 0
  # false = Toute valeur égale à 1
  while 5 + 9 / 4 - 9 * 4 / 0.58965 * 45 do {
    a = 3 + a;
  }

  # Tests de conditions imbriquées
  # if, else, else if
  if a then {
    if b then {
      write("a");
    }
    else if j then {
      write("l");
    }
  }
  else if k then {
    k = 0;

    if r then {
      write("bonjour");
    }
  }
  else {
    a = b + 5 > 0 ? 38 : -52;
  }

  # Tests de la négation
  if !!!!5 or !false then {
    write("Ca marche !\n");
  }

  # Tests de négation complexe
  if !a + !b * !c == !true + !false * !false then {
    a += !f - !fun_4(!!true + !k / t, 1, 1, 1);
  }  

  # Test incompréhensible mais qui doit marcher !
  # Mélange d'affectations dans des conditions + négations + différents types + or + and
  while (a + b + fun_2((d = 58 + 6 / !a * !b + !c - true), !true)) / j + 3 * k - (b = true ? "a" : "b") > 5 and k == 0 or j < k * 9 + !fun(b - 5) * !fun(k / 10) or (a = b - 5 > 8 * fun(!z) ? true : false) do {
    write("Hum hum");
  }

  return 10;
}
